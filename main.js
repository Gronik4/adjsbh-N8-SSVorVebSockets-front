(()=>{"use strict";var e,t,r,n,o,s,i,a={264:(e,t,r)=>{r(177);class n{constructor(e,t,r){this.N=e===r?"You":e,this.M=t}creatMessage(){const e=document.createElement("div");e.className="messag";const t=document.createElement("p");t.className="mesHead";const r=n.getTime();"You"===this.N?(e.classList.add("right"),t.innerHTML=`<span class="colr_name">${this.N} ${r}</span>`):t.innerHTML=`<span>${this.N} ${r}</span>`,e.append(t);const o=document.createElement("h4");return o.classList="messText",o.textContent=this.M,e.append(o),e}static getTime(){const e=new Date,t=e.getFullYear().toString().slice(2),r=e.getMonth()<10?`0${e.getMonth()+1}`:e.getMonth()+1;return`${e.getDate()<10?`0${e.getDate()}`:e.getDate()}.${r}.${t} ${e.getHours()<10?`0${e.getDate()}`:e.getHours()}:${e.getMinutes()<10?`0${e.getDate()}`:e.getMinutes()}`}}const o=r.p+"2da8e18177e4c2518bc3.png";class s{constructor(e){this.N=e}creatOnlin(){const e=document.createElement("div");e.className="tikN";const t=document.createElement("img");t.className="circ",t.src=o,e.append(t);const r=document.createElement("h5");return r.className="h5",r.textContent=this.N,e.append(r),e}}class i{constructor(e){this.fl=e}creatP(){const e=document.createElement("div");e.className="popup";const t=document.createElement("form"),r=document.createElement("h4");switch(r.className="h4",this.fl){case"start":r.textContent="Выберите псевдоним";break;case"busy":r.textContent="Выбранный псевдоним занят. Пожалуйста укажите другой.";break;case"emty":r.textContent="Нельзя отсылать пустую строку. Пожалуйста выберите псевдоним"}t.append(r);const n=document.createElement("textarea");n.className="nikName",n.rows=1;const o=document.createElement("p"),s=document.createElement("button");return s.className="buttF",s.textContent="Продолжить",o.append(s),t.append(n),t.append(o),e.append(t),e}}new class{constructor(){this.container=document.querySelector(".container"),this.online=document.getElementById("ol"),this.blockMessage=document.getElementById("sm"),this.textMess=document.getElementById("ta"),this.lclSt=localStorage.getItem("Nik"),this.parsLcS=JSON.parse(this.lclSt),this.forExit=this.parsLcS?JSON.stringify({exit:this.parsLcS}):0,this.me=void 0,this.ws=new WebSocket("ws://localhost:7999/ws"),window.addEventListener("unload",(()=>{this.ws.send(this.forExit)})),this.init(),this.textMess.addEventListener("keydown",(e=>{"NumpadEnter"===e.code&&this.hendlerMessage()})),this.ws.addEventListener("message",this.gettingData.bind(this)),this.ws.addEventListener("close",(e=>{console.log("socket close:",e)})),this.ws.addEventListener("error",(e=>{console.log("error",e)}))}init(){this.ws.addEventListener("open",(e=>{console.log("socket open:",e.type),this.ws.send("start"),this.ws.readyState===WebSocket.OPEN?this.lclSt?(this.ws.send(JSON.stringify({entre:this.parsLcS})),this.me=this.parsLcS.nik,this.textMess.removeAttribute("disabled")):(this.showPopup("start"),this.me=0):alert("WebSocket - close.")}))}hendlerNik(e){e.preventDefault();const t=document.querySelector(".nikName").value;if(!t)return document.querySelector(".popup").remove(),void this.showPopup("emty");this.ws.readyState===WebSocket.OPEN&&(this.ws.send(JSON.stringify({registered:{nik:t,id:0}})),document.querySelector(".popup").remove())}hendlerMessage(){""===this.textMess.value&&(alert("Нельзя отправить пустое место. Наберите пожалуйста Ваше сообщение."),this.textMess.value=""),this.ws.readyState===WebSocket.OPEN&&(this.ws.send(JSON.stringify({mess:{author:this.me,mess:this.textMess.value}})),this.textMess.value="")}showPopup(e){const t=new i(e).creatP();t.querySelector(".buttF").addEventListener("click",this.hendlerNik.bind(this)),this.container.append(t),t.style.left=(this.container.offsetWidth-t.offsetWidth)/2+"px"}gettingData(e){if("busy"===e.data)this.showPopup("busy");else{let t;const r=JSON.parse(e.data);if("Buffer"===r.type){const e=new Uint8Array(r.data);t=JSON.parse((new TextDecoder).decode(e))}else t=r;if(t.registered&&(localStorage.setItem("Nik",`${JSON.stringify(t.registered)}`),this.textMess.removeAttribute("disabled")),t.onlines&&t.onlines.forEach((e=>{const t=new s(e.nik).creatOnlin();this.online.append(t)})),t.onlin){const e=new s(t.onlin.nik).creatOnlin();this.online.append(e)}if(t.messages){const e=25;t.messages.forEach((t=>{const r=new n(t.author,t.mess,this.me).creatMessage();this.blockMessage.append(r),r.classList.contains("right")&&(r.style.marginLeft=this.blockMessage.offsetWidth-r.offsetWidth-e+"px")}))}if(t.mess){const e=29,r=new n(t.mess.author,t.mess.mess,this.me).creatMessage();this.blockMessage.prepend(r),r.classList.contains("right")&&(r.style.marginLeft=this.blockMessage.offsetWidth-r.offsetWidth-e+"px")}t.exit&&document.querySelectorAll(".tikN").forEach((e=>{e.lastChild.textContent===t.exit.nik&&e.remove()}))}}}},783:(e,t,r)=>{var n=r(618),o=Object.create(null),s="undefined"==typeof document,i=Array.prototype.forEach;function a(){}function c(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function d(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&c(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(s)return console.log("no window.document found, will not HMR CSS"),a;var r,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),s=r[r.length-1];s&&(t=s.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=p(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(c(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},c={};function d(e){var t=c[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=c[e]={id:e,exports:{}};try{var n={id:e,module:r,factory:a[e],require:d};d.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.exports}d.m=a,d.c=c,d.i=[],d.hu=e=>e+"."+d.h()+".hot-update.js",d.miniCssF=e=>{},d.hmrF=()=>"main."+d.h()+".hot-update.json",d.h=()=>"2b17a5e85d8765605bb6",d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="adjsbh-n8-ssvorvebsockets-front:",d.l=(r,n,o,s)=>{if(e[r])e[r].push(n);else{var i,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+o){i=u;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,d.nc&&i.setAttribute("nonce",d.nc),i.setAttribute("data-webpack",t+o),i.src=r),e[r]=[n];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(h);var o=e[r];if(delete e[r],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),t)return t(n)},h=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),a&&document.head.appendChild(i)}},(()=>{var e,t,r,n={},o=d.c,s=[],i=[],a="idle",c=0,l=[];function u(e){a=e;for(var t=[],r=0;r<i.length;r++)t[r]=i[r].call(null,e);return Promise.all(t)}function p(){0==--c&&u("ready").then((function(){if(0===c){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function h(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(d.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(d.hmrC).reduce((function(e,o){return d.hmrC[o](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===c?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var n=t.map((function(t){return t(e)}));t=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var s=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var i,a=u("apply"),c=function(e){i||(i=e)},d=[];return n.forEach((function(e){if(e.apply){var t=e.apply(c);if(t)for(var r=0;r<t.length;r++)d.push(t[r])}})),Promise.all([s,a]).then((function(){return i?u("fail").then((function(){throw i})):r?m(e).then((function(e){return d.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return d}))}))}function v(){if(r)return t||(t=[]),Object.keys(d.hmrI).forEach((function(e){r.forEach((function(r){d.hmrI[e](r,t)}))})),r=void 0,!0}d.hmrD=n,d.i.push((function(l){var m,v,g,y,E=l.module,w=function(t,r){var n=o[r];if(!n)return t;var i=function(i){if(n.hot.active){if(o[i]){var a=o[i].parents;-1===a.indexOf(r)&&a.push(r)}else s=[r],e=i;-1===n.children.indexOf(i)&&n.children.push(i)}else console.warn("[HMR] unexpected require("+i+") from disposed module "+r),s=[];return t(i)},d=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(i,l,d(l));return i.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return c++,e.then(p,p),e;default:return e}}(t.e(e))},i}(l.require,l.id);E.hot=(m=l.id,v=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){s=v.parents.slice(),e=g?void 0:m,d(m)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":t=[],Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(d.hmrI).forEach((function(e){d.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:h,apply:f,status:function(e){if(!e)return a;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:n[m]},e=void 0,y),E.parents=s,E.children=[],s=[],l.require=w})),d.hmrC={},d.hmrI={}})(),(()=>{var e;d.g.importScripts&&(e=d.g.location+"");var t=d.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),d.p=e})(),r=(e,t,r,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=s=>{if(o.onerror=o.onload=null,"load"===s.type)r();else{var i=s&&("load"===s.type?"missing":s.type),a=s&&s.target&&s.target.href||t,c=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=i,c.request=a,o.parentNode.removeChild(o),n(c)}},o.href=t,document.head.appendChild(o),o},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(i=r[n]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var s=document.getElementsByTagName("style");for(n=0;n<s.length;n++){var i;if((o=(i=s[n]).getAttribute("data-href"))===e||o===t)return i}},o=[],s=[],i=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<s.length;e++)s[e].rel="stylesheet";s.length=0}}),d.hmrC.miniCss=(e,t,a,c,l,u)=>{l.push(i),e.forEach((e=>{var t=d.miniCssF(e),i=d.p+t,a=n(t,i);a&&c.push(new Promise(((t,n)=>{var c=r(e,i,(()=>{c.as="style",c.rel="preload",t()}),n);o.push(a),s.push(c)})))}))},(()=>{var e,t,r,n,o,s=d.hmrS_jsonp=d.hmrS_jsonp||{179:0},i={};function a(t,r){return e=r,new Promise(((e,r)=>{i[t]=e;var n=d.p+d.hu(t),o=new Error;d.l(n,(e=>{if(i[t]){i[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),s=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+n+": "+s+")",o.name="ChunkLoadError",o.type=n,o.request=s,r(o)}}))}))}function c(e){function i(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),s=o.id,i=o.chain,c=d.c[s];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var l=0;l<c.parents.length;l++){var u=c.parents[l],p=d.c[u];if(p){if(p.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([u]),moduleId:s,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[s]?(r[u]||(r[u]=[]),a(r[u],[s])):(delete r[u],t.push(u),n.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}d.f&&delete d.f.jsonpHmr,t=void 0;var c={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var h in r)if(d.o(r,h)){var f,m=r[h],v=!1,g=!1,y=!1,E="";switch((f=m?i(h):{type:"disposed",moduleId:h}).chain&&(E="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+h+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(f),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),y=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(g)for(h in u[h]=m,a(l,f.outdatedModules),f.outdatedDependencies)d.o(f.outdatedDependencies,h)&&(c[h]||(c[h]=[]),a(c[h],f.outdatedDependencies[h]));y&&(a(l,[f.moduleId]),u[h]=p)}r=void 0;for(var w,b=[],k=0;k<l.length;k++){var x=l[k],S=d.c[x];S&&(S.hot._selfAccepted||S.hot._main)&&u[x]!==p&&!S.hot._selfInvalidated&&b.push({module:x,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete s[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var o=r.pop(),i=d.c[o];if(i){var a={},u=i.hot._disposeHandlers;for(k=0;k<u.length;k++)u[k].call(null,a);for(d.hmrD[o]=a,i.hot.active=!1,delete d.c[o],delete c[o],k=0;k<i.children.length;k++){var p=d.c[i.children[k]];p&&(e=p.parents.indexOf(o))>=0&&p.parents.splice(e,1)}}}for(var h in c)if(d.o(c,h)&&(i=d.c[h]))for(w=c[h],k=0;k<w.length;k++)t=w[k],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(t){for(var r in u)d.o(u,r)&&(d.m[r]=u[r]);for(var n=0;n<o.length;n++)o[n](d);for(var s in c)if(d.o(c,s)){var i=d.c[s];if(i){w=c[s];for(var a=[],p=[],h=[],f=0;f<w.length;f++){var m=w[f],v=i.hot._acceptedDependencies[m],g=i.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),p.push(g),h.push(m)}}for(var y=0;y<a.length;y++)try{a[y].call(null,w)}catch(r){if("function"==typeof p[y])try{p[y](r,{moduleId:s,dependencyId:h[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:s,dependencyId:h[y],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:s,dependencyId:h[y],error:r}),e.ignoreErrored||t(r)}}}for(var E=0;E<b.length;E++){var k=b[E],x=k.module;try{k.require(x)}catch(r){if("function"==typeof k.errorHandler)try{k.errorHandler(r,{moduleId:x,module:d.c[x]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:x,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdateadjsbh_n8_ssvorvebsockets_front=(t,n,s)=>{for(var a in n)d.o(n,a)&&(r[a]=n[a],e&&e.push(a));s&&o.push(s),i[t]&&(i[t](),i[t]=void 0)},d.hmrI.jsonp=function(e,t){r||(r={},o=[],n=[],t.push(c)),d.o(r,e)||(r[e]=d.m[e])},d.hmrC.jsonp=function(e,i,l,u,p,h){p.push(c),t={},n=i,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){d.o(s,e)&&void 0!==s[e]?(u.push(a(e,h)),t[e]=!0):t[e]=!1})),d.f&&(d.f.jsonpHmr=function(e,r){t&&d.o(t,e)&&!t[e]&&(r.push(a(e)),t[e]=!0)})},d.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(d.p+d.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),d(264)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,